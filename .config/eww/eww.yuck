(defwindow upper-bar
  :monitor 0
  :geometry (geometry
    :x 0 :y 30
    :width "100%" :height 40
    :anchor "top center")
  :stacking "fg"
  :exclusive false
  :focusable false
  (box :class "bar" :space-evenly false
    (group :halign "start" (box :spacing 6 :space-evenly false
      (label :text "${active-workspace}" :visible false)
      (label :text "${active-windows}" :visible false)
      (for ws in workspaces (workspace :ws ws))))
    (group :halign "end" :spacing 6
      (camera)
      (volume)
      (brightness)
      (battery)
      (wifi)
      (bluetooth)
      (keyboard-layout)
      (weather)
      (date)
      (time)
      (power))))

(defwindow lower-bar
  :monitor 0
  :geometry (geometry
    :x 0 :y 30
    :width "100%" :height 40
    :anchor "bottom center")
  :stacking "fg"
  :exclusive false
  :focusable false
  (box :class "bar" :space-evenly false
    (group :halign "start" (box :spacing 6 :space-evenly false
      (label :text "${media-info}" :visible false)
      (label :text "${media-status}" :visible false)
      (label :text "${current-player}" :visible false)
      (for m in media-info
        (media :player {m.player} :name {m.name}
          :title {m.title} :album {m.album} :artist {m.artist}))))
    (group :halign "end" :spacing 6
      (temp)
      (cpu)
      (ram)
      (disk))))

(defwindow todo-list
  :monitor 0
  :geometry (geometry 
    :x 0 :y 70
    :width "100%" :height 20
    :anchor "bottom center")
  :stacking "bg"
  :exclusive false
  :focusable false
  (box :class "bar todolist" :halign "start" :spacing 5 :space-evenly false :orientation "vertical"
    (todo "Full-screen mode")
    (todo "System tray")
    (todo "External volumes")
    (todo "Ethernet and VPNs")
    (todo "dunst")
    (todo "tofi")
    (todo "neovim")
    (todo "Dropdowns")
    (todo "Better disabled/unused/inactive")
    (todo "Microphone/Screenshare")
    (todo "Authentication")
    (todo "Accurate clock icon")
    (todo "Aligned icons")))

(defwidget todo []
  (box :class "todo" :space-evenly false :spacing 5 :hexpand false
    (box)
    (children)))

(defvar reveal-all false)

(defwidget group [?halign ?spacing]
  (box :class "group" :halign halign :hexpand true :spacing {spacing ?: 10} :space-evenly false (children)))

(defwidget component [name ?type ?hover ?only-info ?inactive ?disabled]
  (eventbox
    :onhover {`${EWW_CMD} update ${name}-hover=${hover}`}
    :onhoverlost {`sleep 0.025 && [ "$(${EWW_CMD} get ${name}-hover)" = "${hover}" ] && ${EWW_CMD} update ${name}-hover=false`}
    (box :space-evenly false
      :class "${name} component ${type ?: 'normal'} ${(disabled ?: false) ? 'disabled' : ''} ${(inactive ?: false) ? 'inactive' : ''}"
      (children))))

(defwidget icon [?class]
  (box :class "icon ${class}"
    :height 20 :width 20
    (children)))

(defwidget info [?visible ?space-evenly ?spacing ?class]
  (box :class "info ${class}"
    :visible {visible ?: true}
    :space-evenly {space-evenly ?: false}
    :spacing {spacing ?: 0}
    (children)))

(defwidget more-info [on ?cond ?hide ?with-all ?transition ?duration ?class]
  (revealer :class class
    :reveal {(hide ?: false)
      ? !((on || (reveal-all && (with-all ?: true))) && (cond ?: true))
      :   (on || (reveal-all && (with-all ?: true))) && (cond ?: true)}
    :transition {transition ?: "slideright"}
    :duration {duration ?: "200ms"}
    (children)))

(defpoll time-data :interval "0.1s"
  :initial '{"hour": "00", "min": "00", "sec": "00"}'
  `date +'{"hour": "%H", "min": "%M", "sec": "%S"}'`)

(defvar time-hover false)
(defvar time-reveal false)

(defwidget time []
  (component :name "time" :hover true :type "static"
    (icon "")
    (info
      (label :width 0 :xalign 1 :text "${time-data.hour}:${time-data.min}")
      (more-info :on {time-reveal || time-hover}
        (label :width 18 :xalign 0 :text ":${time-data.sec}")))))

(defpoll date-data :interval "60s"
  :initial '{"day": "01", "month": "01", "year": "70", "weekday": "Thursday", "short_day": "1", "long_suffix": "of January 1970"}'
  `date +'{"day": "%d", "month": "%m", "year": "%y", "weekday": "%A", "short_day": "%-d", "long_suffix": "of %B, %Y"}'`)

(defvar date-hover false)
(defvar date-reveal false)

(defwidget date []
  (component :name "date" :hover true :type "static"
    (icon "")
    (more-info :on {date-reveal || date-hover} :cond {date-data.day != "--"} :hide true :class "info"
      "${date-data.day}/${date-data.month}")
    (more-info :on {date-reveal || date-hover} :cond {date-data.day != "--"} :duration "350ms" :class "info"
      "${date-data.weekday}, ${date-data.short_day}${
        (date-data.day >= 10 && date-data.day < 20)
        || date-data.day % 10 > 3 ? 'th' : ['th', 'st', 'nd', 'rd'][date-data.day % 10]
      } ${date-data.long_suffix}")))

(defvar battery-hover false)
(defvar battery-reveal false)

(defpoll battery-time :interval "10s"
  :initial "N/A"
  `acpi -b | grep "^Battery 0" | grep -oE "[0-9]{2}:[0-9]{2}" || echo "N/A"`)

(defwidget battery []
  (component :name "battery" :hover true
    :type {EWW_BATTERY.BAT0.status != "Discharging" ? "good"
            : EWW_BATTERY.BAT0.capacity > 20 ? "normal" 
            : EWW_BATTERY.BAT0.capacity > 10 ? "warning"
            : "critical"}
    (icon
      {EWW_BATTERY.BAT0.status == "Charging"
      ? (EWW_BATTERY.BAT0.capacity > 20 ? "" : "")
      : (EWW_BATTERY.BAT0.capacity > 20 ? ""
        : EWW_BATTERY.BAT0.capacity > 10 ? ""
        : "")})
    (more-info :on {battery-reveal || battery-hover || EWW_BATTERY.BAT0.status == "Charging" || EWW_BATTERY.BAT0.status == "Discharging"}
      (info "${EWW_BATTERY.BAT0.capacity}%"))
    (more-info :on {battery-reveal || battery-hover} :cond {battery-time != "N/A"} :transition "slideleft"
      (box :space-evenly false
        (icon "")
        (info {battery-time})))))

(defvar cpu-hover false)
(defvar cpu-reveal false)

(defwidget cpu []
  (component :name "cpu" :hover true
    :type {EWW_CPU.avg < 20 ? "normal" : EWW_CPU.avg < 50 ? "warning" : "critical"}
    (icon "")
    (info "${round(EWW_CPU.avg, 0)}%")
    (more-info :on {cpu-reveal || cpu-hover} :transition "slideleft" :duration "300ms"
      (box :space-evenly false
        (icon "")
        (info "${round(jq(EWW_CPU.cores, 'map(.freq) | add') / 12000, 1)} GHz")))))

(defvar ram-hover false)
(defvar ram-reveal false)

(defwidget ram []
  (component :name "ram" :hover true
    :type {EWW_RAM.used_mem / 1073741824 < 10 ? "normal" : EWW_RAM.used_mem / 1073741824 < 20 ? "warning" : "critical"}
    (icon "")
    (info :spacing {ram-reveal || ram-hover || reveal-all ? 3 : 0}
      "${round(EWW_RAM.used_mem / 1073741824, 1)} GiB"
      (more-info :on {ram-reveal || ram-hover}
        "/ ${round(EWW_RAM.total_mem / 1073741824, 1)} GiB"))))

(defvar temp-hover false)
(defvar temp-reveal false)

(defwidget temp []
  (component :name "temp"
    :type {EWW_TEMPS.DELL_DDV_CPU < 50 ? "normal" : EWW_TEMPS.DELL_DDV_CPU < 80 ? "warning" : "critical"}
    (icon {EWW_TEMPS.DELL_DDV_CPU < 50 ? "" : EWW_TEMPS.DELL_DDV_CPU < 80 ? "" : ""})
    (info "${EWW_TEMPS.DELL_DDV_CPU}°C")))

(deflisten wlan0
  :initial '{"connection": "", "state": "unknown", "signal": ""}'
  `~/.config/eww/scripts/get-network-status`)

(defvar wifi-hover false)
(defvar wifi-reveal false)

(defwidget wifi []
  (component :name "wifi" :hover true :disabled {wlan0.state == "disconnected"}
    (icon
      {wlan0.state == "disconnected" ? ""
      : wlan0.state != "connected" || wlan0.signal == "" ? ""
      : wlan0.signal == 0 ? ""
      : wlan0.signal <= 25 ? ""
      : wlan0.signal <= 50 ? ""
      : wlan0.signal <= 75 ? ""
      : ""})
    (more-info :on {wifi-reveal || wifi-hover} :cond {wlan0.connection != ""}
      (info :class {wlan0.state != "connected" ? "inactive" : ""}
        {wlan0.connection}))))

(deflisten active-keyboard-layout
  :initial ""
  `~/.config/eww/scripts/get-active-keyboard-layout`)

(defvar keyboard-hover false)
(defvar keyboard-reveal false)

(defwidget keyboard-layout []
  (component :name "keyboard" :hover true :type "static"
    (icon {active-keyboard-layout == "" ? "" : ""})
    (box :visible {active-keyboard-layout != ""} :space-evenly false
      (button :onclick `hyprctl switchxkblayout at-translated-set-2-keyboard 0 > /dev/null`
        (more-info :on {keyboard-reveal || keyboard-hover || active-keyboard-layout == "IS"} :with-all false
          :transition "slideright" :duration "200ms"
          :class 'info ${active-keyboard-layout != "IS" ? "inactive" : ""}'
            "IS"))
      (button :onclick `hyprctl switchxkblayout at-translated-set-2-keyboard 1 > /dev/null`
        (more-info :on {keyboard-reveal || keyboard-hover || active-keyboard-layout == "US"} :with-all false
          :transition "slideleft" :duration "200ms"
          :class 'info ${active-keyboard-layout != "US" ? "inactive" : ""}'
            "US")))))

(defvar disk-hover false)
(defvar disk-reveal false)

(defwidget disk []
  (component :name "disk" :hover true
    :type {EWW_DISK["/"].free < 64000000000 ? "critical" : EWW_DISK["/"].free < 128000000000 ? "warning" : "normal"}
    (icon "")
    (info :spacing {disk-reveal || disk-hover || reveal-all ? 3 : 0}
      "${round(EWW_DISK["/"].free / 1000000000, 0)} GB"
      (more-info :on {disk-reveal || disk-hover}
          "/ ${round(EWW_DISK["/"].total / 1000000000, 0)} GB"))))

(defpoll current-weather :interval "5m"
  :initial '{}'
  `curl -sf "https://api.open-meteo.com/v1/forecast?latitude=64.1123&longitude=-21.913&current_weather=true" | jq '.current_weather'`)

(defvar weather-hover false)
(defvar weather-reveal false)

(defwidget weather []
  (component :name "weather" :hover true :type "static"
    (icon {current-weather.weathercode == "null" ? ""
      : current-weather.weathercode <=  1 ? (current-weather.is_day != 0 ? "" : "")
      : current-weather.weathercode ==  2 ? (current-weather.is_day != 0 ? "" : "")
      : current-weather.weathercode ==  3 ? ""
      : current-weather.weathercode <= 48 ? (current-weather.is_day != 0 ? "" : "")
      : current-weather.weathercode <= 57 ? ""
      : current-weather.weathercode <= 67 ? ""
      : current-weather.weathercode <= 77 ? ""
      : current-weather.weathercode <= 82 ? ""
      : current-weather.weathercode <= 86 ? ""
      : current-weather.weathercode <= 99 ? ""
      : ""})
    (info :visible {current-weather.temperature != "null"} "${current-weather.temperature}°C")
    (more-info :on {weather-reveal || weather-hover}
      :cond {current-weather.windspeed != "null"}
      :transition "slideleft" :duration "300ms"
      (box :space-evenly false
        (icon {current-weather.winddirection == "null" ? ""
          : current-weather.winddirection <= 22.5 || current-weather.winddirection > 337.5 ? ""
          : current-weather.winddirection <= 67.5 ? ""
          : current-weather.winddirection <= 112.5 ? ""
          : current-weather.winddirection <= 157.5 ? ""
          : current-weather.winddirection <= 202.5 ? ""
          : current-weather.winddirection <= 247.5 ? ""
          : current-weather.winddirection <= 292.5 ? ""
          : current-weather.winddirection <= 337.5 ? ""
          : ""
        })
        (info "${round((current-weather.windspeed ?: 0)/3.6, 1)} m/s")))))

(deflisten workspaces
  :initial "[]"
  `~/.config/eww/scripts/hyprland/get-workspaces`)

(deflisten active-workspace
  :initial ""
  `~/.config/eww/scripts/hyprland/get-active-workspace`)

(deflisten active-windows
  :initial "{}"
  `~/.config/eww/scripts/hyprland/get-active-windows`)

(defwidget workspace-header [id name]
  (button :class "header"
    :width 20 :height 20
    :onclick `hyprctl dispatch workspace ${id} > /dev/null`
    {id == 1 ? "" : id == 2 ? "" : id == 3 ? "" : id == 4 ? "" : id == 5 ? ""
      : id == 6 ? "" : id == 7 ? "" : id == 8 ? "" : id == 9 ? "" : id == 10 ? "" : ""}))

(defvar window-hover false)
(defvar window-reveal 1)

(defwidget window [win wsid]
  (component :name "window" :hover {win.address} :type "none"
    (button :onclick `hyprctl dispatch focuswindow address:${win.address} > /dev/null`
      (box :space-evenly false :valign "center"
        (label
          :width 20 :height 20
          :text {win.address == active-windows['${wsid}']
            ? win.class == "kitty" ? ""
              : win.class == "firefox"
                ? win.title =~ ".*YouTube$" ? ""
                : win.title =~ ".*Twitch$" ? ""
                : win.title =~ ".*Netflix$" ? ""
                : win.title =~ ".*LinkedIn$" ? ""
                : ""
              : win.class == "org.pwmt.zathura" ? ""
              : win.class == "steam" ? ""
              : win.class == "mpv" ? ""
              ;; : win.class == "mpv" ? ""
              : ""
            : win.class == "kitty" ? ""
              : win.class == "firefox"
                ? win.title =~ ".*YouTube$" ? ""
                : win.title =~ ".*Twitch$" ? ""
                : win.title =~ ".*Netflix$" ? ""
                : win.title =~ ".*LinkedIn$" ? ""
                : ""
              : win.class == "org.pwmt.zathura" ? ""
              : win.class == "steam" ? ""
              : win.class == "mpv" ? ""
              ;; : win.class == "mpv" ? ""
              : ""})
        (more-info :class "title"
          :on {
            window-hover == win.address
            || (window-reveal == 1 && wsid == active-workspace && win.address == active-windows['${wsid}'])
            || (window-reveal == 2 && wsid == active-workspace)
            || (window-reveal == 3 && win.address == active-windows['${wsid}'])
            || window-reveal == 4
          }
          :with-all {wsid == active-workspace && win.address == active-windows['${wsid}']}
          (label
            :limit-width 40
            :text {win.title}))))))

(defwidget windows [wins wsid]
  (box :class "windows" :space-evenly false
    (for win in wins (window :win win :wsid wsid))))

(defwidget workspace [ws]
  (box :class "workspace ${ws.workspace.id == active-workspace ? 'active' : ''}"
    :space-evenly false
    (workspace-header :id {ws.workspace.id} :name {ws.workspace.name})
    (windows :wins {ws.windows} :wsid {ws.workspace.id})))

(defvar brightness-hover false)
(defvar brightness-reveal false)

(deflisten current-brightness
  :initial '{"value": 0, "recent": false}'
  `~/.config/eww/scripts/get-brightness`)

(defwidget brightness []
  (component :name "brightness" :hover true
    (icon "")
    (more-info :on {brightness-reveal || brightness-hover || current-brightness.recent}
      :transition "slideleft" :duration "300ms"
      (scale :class "slider"
        :value {current-brightness.value}
        :min 0 :max 401 :round-digits 0
        :onchange `brightnessctl set {} > /dev/null`))))

(defvar volume-hover false)
(defvar volume-reveal false)

(deflisten current-volume
  :initial '{"value": 0, "muted": true, "recent": false}'
  `~/.config/eww/scripts/get-volume`)

(defwidget volume []
  (component :name "volume" :hover true :disabled {current-volume.muted}
    (button :onclick "ydotool key 113:1 113:0"
      (icon {current-volume.value == 0 || current-volume.muted ? "" : current-volume.value < 50 ? "" : ""}))
    (more-info :on {volume-reveal || volume-hover || current-volume.recent}
      :transition "slideleft" :duration "300ms"
      (scale :class "slider"
        :value {current-volume.value}
        :min 0 :max 101 :round-digits 0
        :onchange `wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%`))))

(deflisten camera-used
  :initial false
  `~/.config/eww/scripts/get-camera`)

(defvar camera-hover false)

(defwidget camera []
  (component :name "camera" :type "focus" :disabled {!camera-used}
    (icon {camera-used ? "" : ""})))

(defpoll bluetooth-powered :interval "2s"
  :initial false
  `~/.config/eww/scripts/bluetooth/get-powered`)

(defpoll bluetooth-connected :interval "2s"
  :initial false
  `if [ -n "$(bluetoothctl devices Connected)" ]; then echo "true"; else echo "false"; fi`)

(defpoll bluetooth-info :interval "10s"
  :initial "[]"
  `~/.config/eww/scripts/bluetooth/get-info`)

(defvar bluetooth-hover false)
(defvar bluetooth-reveal 1)

(defwidget device [address type alias connected]
  (component :name "bluetooth" :type "none" :hover address :inactive {!connected}
    (button :timeout "10s"
      :onclick `bluetoothctl ${connected ? "dis" : ""}connect ${address} > /dev/null`
      (box :space-evenly false
        (label :width 20 :height 20 :text
          { type == "audio-card"        ? ""
          : type == "audio-headphones"  ? ""
          : type == "audio-headset"     ? ""
          : type == "audio-headset"     ? ""
          : type == "camera-photo"      ? ""
          : type == "camera-video"      ? ""
          : type == "computer"          ? ""
          : type == "input-gaming"      ? ""
          : type == "input-keyboard"    ? ""
          : type == "input-mouse"       ? ""
          : type == "input-tablet"      ? ""
          : type == "modem"             ? ""
          : type == "multimedia-player" ? ""
          : type == "network-wireless"  ? ""
          : type == "phone"             ? ""
          : type == "printer"           ? ""
          : type == "scanner"           ? ""
          : type == "video-display"     ? ""
          : ""})
        (label :class "alias" :text alias)))))

(defwidget bluetooth []
  (box :space-evenly false
    (component :name "bluetooth" :hover true :disabled {!bluetooth-powered}
      (button :timeout "500ms"
        :onclick `bluetoothctl power ${bluetooth-powered ? "off" : "on"} > /dev/null && ${EWW_CMD} update bluetooth-powered=${!bluetooth-powered}`
        (icon {bluetooth-connected ? "" : ""})))
    (label :visible false :text {bluetooth-info})
    (component :name "bluetooth" :hover false :disabled {!bluetooth-powered}
      (box :space-evenly false
        (for device in bluetooth-info
          (more-info :cond {bluetooth-powered} :with-all false :duration "300ms"
            :on {bluetooth-hover != false || device.connected}
            (device :address {device.MAC} :type {device.icon} :alias {device.alias} :connected {device.connected})))))))

(deflisten media-info
  :initial "[]"
  `~/.config/eww/scripts/media/get-info`)

(deflisten media-status
  :initial "{}"
  `~/.config/eww/scripts/media/get-status`)

(deflisten current-player
  :initial ""
  `~/.config/eww/scripts/media/get-current`)

(defvar media-hover false)
(defvar media-reveal 3)

(defwidget media [player name title album artist]
  (box :space-evenly false
    (component :name "media" :hover {player} :type "none"
      (box :space-evenly false
        :class "normal ${player == current-player ? '' : 'disabled'} ${media-status[player] == 'Stopped' ? 'inactive' : ''}"
        (button
          :onclick `dbus-send --dest=org.mpris.MediaPlayer2.${player} --type=method_call /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Raise`
          :onmiddleclick `playerctl --player ${player} stop`
          (icon
            { name == "firefox" ? ""
            : name == "mpv" ? ""
            ;; : name == "mpv" ? ""
            : name == "spotify" ? ""
            : ""})))
      (more-info :with-all false :on {
          ((media-reveal == 1 || media-reveal == 2) && player == current-player) || media-reveal > 2
          || media-hover == player || media-hover == "${player}-info"
        }
        (box :space-evenly false :spacing {-3}
          :class "controls normal ${player == current-player ? '' : 'disabled'} ${media-status[player] == 'Stopped' ? 'inactive' : ''}"
          (button :width 20 :height 20
            :onclick `playerctl --player ${player} previous`
            :onmiddleclick `playerctl --player ${player} stop`
            "")
          (button :width 20 :height 20
            :onclick `playerctl --player ${player} play-pause`
            :onmiddleclick `playerctl --player ${player} stop`
            {media-status[player] == "Playing" ? "" : ""})
          (button :width 20 :height 20
            :onclick `playerctl --player ${player} next`
            :onmiddleclick `playerctl --player ${player} stop`
            ""))))
    (more-info :with-all false :on {
        ((media-reveal == 1 || media-reveal == 2) && player == current-player) || media-reveal > 2
        || media-hover == player || media-hover == "${player}:info"
      }
      (component :name "media" :hover "${player}:info"
        :disabled {player != current-player} :inactive {media-status[player] == "Stopped"}
        (button
          :onclick `dbus-send --dest=org.mpris.MediaPlayer2.${player} --type=method_call /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Raise`
          :onmiddleclick `playerctl --player ${player} stop`
          (info
            (label :limit-width 30 :text {title == "" ? "" : title})
            (more-info :on {
                (media-reveal == 2 && player == current-player) || media-reveal == 4
                || media-hover == "${player}:info" 
              }
              (box :space-evenly false
                (box :space-evenly false :visible {album != ""}
                  (label :width 12 :text "·")
                  (label :limit-width 30 :text album))
                (box :space-evenly false :visible {artist != ""}
                  (label :width 12 :text "·")
                  (label :limit-width 30 :text artist))))))))))

(defvar power-hover false)
(defvar power-reveal false)

(defwidget power []
  (component :name "power" :type "none" :hover true
    (button :class "shutdown" :onclick `systemctl poweroff` (icon ""))
    (more-info :on {power-reveal || power-hover} :with-all false :transition "slideleft" :duration "300ms"
      (box :space-evenly false :spacing 5 ""
        (button :class "reboot" :onclick `systemctl reboot` (icon ""))
        (button :class "logout" :onclick `loginctl kill-session self` (icon ""))
        (button :class "lock" :onclick `loginctl lock-session` (icon ""))
        (button :class "suspend" :onclick `systemctl suspend` (icon ""))))))
